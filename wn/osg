#!/bin/bash

echo "osg here" `basename $0`

###################################################################################################
#
# This shell script provides various utility functions for osg jobs
# 

#return codes
#0 - success
#1 - can't set squid
#2 - boot / failed to install node-osg
#3 - failed to download app/data
#4 - downloading of app/data stuck elsewhere - removing and existing

function set-httpproxy {
    #setting up squid location
    export OSG_SQUID_LOCATION=${OSG_SQUID_LOCATION:-UNAVAILABLE}
    if [ "$OSG_SQUID_LOCATION" != UNAVAILABLE ]; then
        #TODO - test to see if squid actually works (if not, ask submitter to report to the site)

        echo "seeting http_proxy=" $OSG_SQUID_LOCATION
        export http_proxy=$OSG_SQUID_LOCATION
        return 0
    else
        echo "OSG_SQUID_LOCATION is not set... not using squid"
        return 1
    fi
}

#cache application by downloading specified tar.gz and unpack it, then create symlinks on the current working directory
#it re-uses cache if cache is available
#it avoids if other instance is already downloading the app.
#usage :: ./osg app http://somewhere.com/stuff.tar.gz stuff

function app {
    appurl=$1
    appname=$2

    echo "installing $appname"

    #figuring out best place to install app
    if [ -w "$OSG_APP" ]; then
        echo "using OSG_APP($OSG_APP) to install apps"
        appdir=$OSG_APP
    else
        if [ -w "$OSG_WN_TMP" ]; then
            echo "using OSG_WN_TMP($OSG_WN_TMP) to install apps"
            appdir=$OSG_WN_TMP
        else
            if [ -w "/tmp" ]; then
                echo "using /tmp to install apps"
                appdir=/tmp
            else
                echo "using cwd to install apps"
                appdir=`pwd`
            fi
        fi
    fi

    cache $appdir $appurl $appname
}

function data {
    appurl=$1
    appname=$2

    echo "installing $appname"

    #figuring out best place to install app
    if [ -w "$OSG_DATA" ]; then
        echo "using OSG_DATA($OSG_DATA) to install data"
        appdir=$OSG_DATA
    else
        if [ -w "$OSG_WN_TMP" ]; then
            echo "using OSG_WN_TMP($OSG_WN_TMP) to install data"
            appdir=$OSG_WN_TMP
        else
            if [ -w "/tmp" ]; then
                echo "using /tmp to install apps"
                appdir=/tmp
            else
                echo "using cwd to install apps"
                appdir=`pwd`
            fi
        fi
    fi

    cache $appdir $appurl $appname
}

function cache {
    appdir=$1
    appurl=$2
    appname=$3

    #download app and unpack if the app not yet installed already being installed (wait if it's installed by someone else)
    if [ ! -d "$appdir/$appname" ]; then
        echo "no $appname in $appdir"
        if [ ! -f "$appdir/$appname.tar.gz" ]; then
            echo "downloading & unpacking $appurl"
            ( 
                cd $appdir 
                curl -m 120 -H "Pragma:" -O $appurl 
                tar -xzf $appname.tar.gz 
                rm $appname.tar.gz 
            )
            if [ $? -ne 0 ]; then
                echo "failed to download/unpack app: $appurl"
                return 3
            fi
        else
            size1=`wc -c $appdir/${appname}.tar.gz`
            sleep 10
            size2=`wc -c $appdir/${appname}.tar.gz`
            if [ ! $size1 -eq $size2 ]; then
                echo "$appname is being downloaded by someone else"
                break
            else
                echo "$appname download seems to be stuck .. removing and killing this job"
                rm $appdir/$appname.tar.gz
                return 4
            fi
        fi
    else
        echo "$appname already exists in $appdir"
    fi

    #create symlink to the app
    ln -s $appdir/$appname $appname

    return 0
}

cmd=$1
shift
case "$cmd" in
set-httpproxy)
    set-httpproxy
    ;;
app)
    app $@
    ;;
data)
    data $@
    ;;
cache)
    cache $@
    ;;
*)
    echo "unknown command given $cmd"
    ;;
esac

exit $?


